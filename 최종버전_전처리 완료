# 최종_전처리완료

import numpy as np
import json
import os
import csv

def calculate_angle(p1, p2, p3):
    """세 점을 이용해 각도 계산"""
    AB = np.array([p2[0] - p1[0], p2[1] - p1[1]])
    BC = np.array([p3[0] - p2[0], p3[1] - p2[1]])
    dot_product = np.dot(AB, BC)
    magnitude_AB = np.linalg.norm(AB)
    magnitude_BC = np.linalg.norm(BC)
    cos_theta = dot_product / (magnitude_AB * magnitude_BC)
    angle = np.arccos(np.clip(cos_theta, -1.0, 1.0)) * 180 / np.pi
    return angle

def get_reba_table_a(trunk_angle, neck_angle, leg_balance):
    trunk_score = 1 if trunk_angle < 20 else 2 if trunk_angle < 60 else 4
    neck_score = 1 if neck_angle < 20 else 2
    leg_score = 1 if leg_balance else 0
    return trunk_score + neck_score + leg_score

def get_reba_table_b(shoulder_angle, elbow_angle, wrist_angle):
    shoulder_score = 1 if shoulder_angle < 45 else 2 if shoulder_angle < 90 else 4
    elbow_score = 1 if elbow_angle < 45 else 2 if elbow_angle < 90 else 3
    wrist_score = 1 if wrist_angle < 15 else 2
    return shoulder_score + elbow_score + wrist_score

def get_reba_table_c(score_A, score_B):
    """Table C 매핑 (실제 REBA 기준 적용)"""
    table_c_map = {
        (1, 1): 1, (1, 2): 2, (1, 3): 3, (1, 4): 4,
        (2, 1): 2, (2, 2): 3, (2, 3): 4, (2, 4): 5,
        (3, 1): 3, (3, 2): 4, (3, 3): 5, (3, 4): 6,
        (4, 1): 4, (4, 2): 5, (4, 3): 6, (4, 4): 7
    }
    return table_c_map.get((score_A, score_B), max(score_A, score_B))

def load_data(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

def process_data(data):
    results = []
    
    if 'images' not in data or 'annotations' not in data:
        print("잘못된 데이터 구조: 'images' 또는 'annotations' 키 없음")
        return []  # 데이터 구조 확인

    if len(data['images']) == 0 or len(data['annotations']) == 0:
        print("데이터 부족: 'images' 또는 'annotations'가 비어 있음")
        return []  # 데이터 부족 확인

    for img_data, ann_data in zip(data['images'], data['annotations']):
        keypoints = ann_data.get('keypoints', [])
        
        if len(keypoints) < 26:
            print(f"키포인트 부족: {img_data['file_name']}")
            continue  # 키포인트가 부족하면 넘어감
        
        head, shoulder, elbow, wrist = keypoints[0], keypoints[4], keypoints[5], keypoints[6]
        hip, knee, ankle = keypoints[17], keypoints[20], keypoints[21]
        
        trunk_angle = calculate_angle(shoulder, hip, knee)
        neck_angle = calculate_angle(head, shoulder, hip)
        leg_balance = ankle[1] < knee[1]
        
        shoulder_angle = calculate_angle(hip, shoulder, elbow)
        elbow_angle = calculate_angle(shoulder, elbow, wrist)
        wrist_angle = calculate_angle(elbow, wrist, keypoints[7])
        
        # ann_data에서 twist 및 bending 정보 가져오기
        trunk_twist = ann_data.get('trunk_twist', 0)
        neck_twist = ann_data.get('neck_twist', 0)
        wrist_twisted = ann_data.get('wrist_twisted', 0)
        trunk_bending = ann_data.get('trunk_bending', 0)
        neck_bending = ann_data.get('neck_bending', 0)
        
        score_A = get_reba_table_a(trunk_angle, neck_angle, leg_balance)
        score_B = get_reba_table_b(shoulder_angle, elbow_angle, wrist_angle)
        score_C = get_reba_table_c(score_A, score_B)
        
        twist_penalty = 2 if (trunk_twist or neck_twist or wrist_twisted) else 0
        bending_penalty = 1 if (trunk_bending or neck_bending) else 0
        
        final_reba_score = score_C + twist_penalty + bending_penalty

        # twist source를 문자열로 합쳐서 출력
        twist_sources = []
        if trunk_twist != 0:
            twist_sources.append("Trunk")
        if neck_twist != 0:
            twist_sources.append("Neck")
        if wrist_twisted != 0:
            twist_sources.append("Wrist")

        # bending source를 문자열로 합쳐서 출력
        bending_sources = []
        if trunk_bending != 0:
            bending_sources.append("Trunk")
        if neck_bending != 0:
            bending_sources.append("Neck")
        
        results.append({
            'frame': img_data['file_name'],
            'trunk_angle': trunk_angle, 'neck_angle': neck_angle,
            'shoulder_angle': shoulder_angle, 'elbow_angle': elbow_angle, 'wrist_angle': wrist_angle,
            'reba_score_A': score_A, 'reba_score_B': score_B, 'reba_score_C': score_C,
            'twist_penalty': twist_penalty, 'bending_penalty': bending_penalty,
            'final_reba_score': final_reba_score,
            'twist_source': ", ".join(twist_sources),  # twist source
            'bending_source': ", ".join(bending_sources)  # bending source
        })
    
    return results

def save_to_csv(results, output_file):
    header = ['frame', 'trunk_angle', 'neck_angle', 'shoulder_angle', 'elbow_angle', 'wrist_angle',
              'reba_score_A', 'reba_score_B', 'reba_score_C', 'twist_penalty', 'bending_penalty', 'final_reba_score',
              'twist_source', 'bending_source']
    
    with open(output_file, 'w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=header)
        writer.writeheader()
        writer.writerows(results)

# 데이터 폴더 및 JSON 파일 경로 설정
data_folder = r"C:\\Users\\Admin\\Desktop\\Final_Project\\Sample\\Sample\\2.라벨링데이터"
json_files = [f for f in os.listdir(data_folder) if f.endswith(".json")]

# 전체 결과 처리
all_results = []
for json_file in json_files:
    file_path = os.path.join(data_folder, json_file)
    data = load_data(file_path)
    processed_results = process_data(data)
    all_results.extend(processed_results)

# 결과를 CSV 파일로 저장
output_file = r"C:\\Users\\Admin\\Desktop\\Final_Project\\processed_results.csv"
save_to_csv(all_results, output_file)

print(f"결과 저장 완료: {output_file}")
